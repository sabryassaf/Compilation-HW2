%{
#include <iostream>
#include "output.hpp"
extern int yylex();
extern int yylineno;
int yyerror(const char *s);
%}

%token INT BYTE B BOOL TRUE FALSE IF RETURN WHILE BREAK CONTINUE SC ID NUM STRING

%right ASSIGN 
%left OR
%left AND
%left ISEQUAL
%left RELOP
%left ADD SUB
%left MULTIPLY DIVIDE
%right ELSE
%right NOT
%left LPAREN RPAREN LBRACE RBRACE 

%%
Program: Statements                                                     {output::printProductionRule(1);};
Statements: Statement                                                   {output::printProductionRule(2);}
            | Statements Statement                                      {output::printProductionRule(3);}; 
                                                                        
Statement: LBRACE Statements RBRACE                                     {output::printProductionRule(4);}
            | Type ID SC                                                {output::printProductionRule(5);}
            | Type ID ASSIGN Exp SC                                     {output::printProductionRule(6);}
            | ID ASSIGN Exp SC                                          {output::printProductionRule(7);}
            | Call SC                                                   {output::printProductionRule(8);}
            | RETURN SC                                                 {output::printProductionRule(9);}
            | IF LPAREN Exp RPAREN Statement %prec IF                   {output::printProductionRule(10);}
            | IF LPAREN Exp RPAREN Statement ELSE Statement             {output::printProductionRule(11);}
            | WHILE LPAREN Exp RPAREN Statement                         {output::printProductionRule(12);}
            | BREAK SC                                                  {output::printProductionRule(13);}
            | CONTINUE SC                                               {output::printProductionRule(14);};

Call:   ID LPAREN Exp RPAREN                                            {output::printProductionRule(15);};

Type:   INT                                                             {output::printProductionRule(16);}
        | BYTE                                                          {output::printProductionRule(17);}
        | BOOL                                                          {output::printProductionRule(18);};

Exp:    LPAREN Exp RPAREN                                               {output::printProductionRule(19);}
        | Exp ADD Exp                                                   {output::printProductionRule(20);}
        | Exp SUB Exp                                                   {output::printProductionRule(20);}
        | Exp DIVIDE Exp                                                {output::printProductionRule(20);}
        | Exp MULTIPLY Exp                                              {output::printProductionRule(20);}
        | ID                                                            {output::printProductionRule(21);}
        | Call                                                          {output::printProductionRule(22);}
        | NUM                                                           {output::printProductionRule(23);}
        | NUM B                                                         {output::printProductionRule(24);}
        | STRING                                                        {output::printProductionRule(25);}
        | TRUE                                                          {output::printProductionRule(26);}
        | FALSE                                                         {output::printProductionRule(27);}
        | NOT Exp                                                       {output::printProductionRule(28);}
        | Exp AND Exp                                                   {output::printProductionRule(29);}
        | Exp OR Exp                                                    {output::printProductionRule(30);}
        | Exp ISEQUAL Exp                                               {output::printProductionRule(31);}
        | Exp RELOP Exp                                                 {output::printProductionRule(31);}
        | LPAREN Type RPAREN Exp                                        {output::printProductionRule(32);};

%%
int yyerror(const char *s) {
    output::errorSyn(yylineno);
    exit(0);}

int main() {
    return yyparse();
}

